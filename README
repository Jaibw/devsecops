## STEPS FOR JENKINS INSTALLATION 

1. Launch an instance
   Name: Jenkins-Server 
   Application and OS Images: Ubuntu Server 20.04 LTS
   Instance type: t2.medium
   Key pair: -- select your key --
   Network settings: click on Edit 
       Security group rule: 
           Type: All traffic 
   Configure storage: 50 GB 
   Click on Launch Instance 
   just wait for some time 

2. Connect to instance and run below commands 
   sudo apt update 
   sudo apt install -y openjdk-8-jdk
   wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
   sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
   sudo apt update
   sudo apt install -y jenkins
   sudo systemctl status jenkins   # press q to exit 
   
3. Goto instance detail in aws console and copy "Public IPv4 DNS" i.e ec2-*.*.compute.amazonaws.com
   Open chrome and access http://ec2-*.*.compute.amazonaws.com:8080
   Paste password form the output of sudo cat /var/lib/jenkins/secrets/initialAdminPassword
   Customize Jenkins: Install Suggested Plugins 
   Fill details for Create First Admin User
   Complete details and open Jenkins homepage    

## SonarQube Steps 
1. Launch an instance
   Name: SonarQube-Server 
   Application and OS Images: Ubuntu Server 20.04 LTS
   Instance type: t2.medium
   
   

   
   Key pair: -- select your key --
   Network settings: click on Edit 
       Security group rule: 
           Type: All traffic 
   Configure storage: 50 GB 
   Click on Launch Instance 
   just wait for some time 

2. Connect to instance and follow https://www.vultr.com/docs/install-sonarqube-on-ubuntu-20-04-lts/ 
   Zip File: https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.9.56886.zip 
   
   
## Install Docker 

wget https://gitlab.com/jai.unix/junit-demo/-/raw/main/install-docker.sh
sh install-docker.sh 
sudo reboot now




docker ps 
docker ps -a 
docker run hello-world 
docker ps -a
docker run --name NAME hello-world 
docker ps -a
docker run --name webserver01 nginx    ## ctrl+c to exit 
docker run -d --name webserver02 nginx 
docker ps -a
docker images
docker pull redis
docker images

docker ps 
docker ps -a 
docker stop webserver02
docker ps 
docker ps -a
docker start webserver01
docker start webserver02
docker ps 
docker ps -a
docker rm CONTAINER-NAME CONTAINER-NAME CONTAINER-NAME
docker ps 
docker ps  -a
docker stop webserver01
docker kill webserver02
docker ps -a
docker rm webserver01 webserver02
docker ps -a
docker images
docker rmi redis nginx hello-world
docker images



git clone https://github.com/Jaibw/FrozenYogurtShop.git
cd FrozenYogurtShop
ls
cat Dockerfile
docker build -t website001 . 
docker images
docker run -d --name server01 website001
docker ps -a




wget https://gitlab.com/jai.unix/junit-demo/-/raw/main/install-trivy.sh
sh install-trivy.sh 
trivy image nginx 



# Run below commands on kubernetes master 
sudo apt update
sudo apt -y upgrade && sudo systemctl reboot   ## wait for some time 
wget https://raw.githubusercontent.com/Jaibw/docker/main/install_k8s_master_ubuntu_20.04.sh  
sh install_k8s_master_ubuntu_20.04.sh

# Run below commands on kubernetes worker 
sudo apt update
sudo apt -y upgrade && sudo systemctl reboot   ## wait for some time 
wget https://raw.githubusercontent.com/Jaibw/docker/main/install_k8s_worker_ubuntu_20.04.sh
sh install_k8s_worker_ubuntu_20.04.sh


### Kubernetes commands 

kubectl get nodes 

mkdir YOURNAME 
cd YOURNAME
kubectl run YOURNAME --image=nginx
kubectl get pods
kubectl get pods -o wide
curl POD_IP 

kubectl describe pod YOURNAME 
kubectl logs YOURNAME
kubectl get pods
kubectl delete pod YOURNAME 
kubectl get pods

cd YOURNAME
wget https://raw.githubusercontent.com/Jaibw/docker/main/mypod.yaml
sed -i 's/myname/YOURNAME/g' mypod.yaml
cat mypod.yaml
kubectl create -f mypod.yaml
kubectl get pods -o wide
curl POD_IP 
kubectl describe pod YOURNAME 
kubectl logs YOURNAME
kubectl get pods
kubectl delete -f mypod.yaml 
kubectl get pods


cd YOURNAME 
wget https://raw.githubusercontent.com/Jaibw/devsecops/master/k8s-deploy.yaml
sed -i 's/username/YOURNAME/g' k8s-deploy.yaml
cat k8s-deploy.yaml
kubectl get all 
kubectl create -f k8s-deploy.yaml 
kubectl get all  
kubectl get all  | grep YOURNAME 
kubectl get svc  | grep YOURNAME 
open your chrome http://PUBLIC-MASTER-IP:NODEPORT   eg. http://13.57.255.215:32161


## Jenkins integration with Kubernetes 

# Run below commands on kube-master node  
sudo su 
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g'  /etc/ssh/sshd_config
passwd ubuntu
systemctl restart ssh

# Run below commands jenkins server 
wget https://raw.githubusercontent.com/Jaibw/docker/main/install_k8s_worker_ubuntu_20.04.sh
sh install_k8s_worker_ubuntu_20.04.sh
sudo su jenkins 
mkdir ~/.kube 
scp ubuntu@MASTER-NODE-IP:/home/ubuntu/.kube/config ~/.kube/config 
kubectl get nodes 



## terraform/ansible integration with Jenkins 
sudo su 
apt update
sudo apt install awscli
wget -qO - terraform.gpg https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/terraform-archive-keyring.gpg
sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/terraform-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release 
-cs) main" > /etc/apt/sources.list.d/terraform.list
apt update
apt install terraform
apt install ansible
su - jenkins 
aws configure
git clone https://github.com/Jaibw/devsecops.git
cd devsecops
terraform init -no-color 
terraform plan -no-color 
terraform apply -no-color -auto-approve
#terraform destroy -no-color -auto-approve
